{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Projectile Motion: Analysis of Range Dependence on Launch Angle 1. Theoretical Foundation Projectile motion is governed by Newton\u2019s laws. Assuming no air resistance, the motion can be described using kinematic equations: Horizontal motion: \\[ x = v_0 \\cos(\\theta) t \\] Vertical motion: $$ y = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 $$ The total time of flight is found by solving for when the projectile returns to its initial height: $$ t_f = \\frac{2 v_0 \\sin(\\theta)}{g} $$ The horizontal range is given by: \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] 2. Analysis of the Range The horizontal range depends on: Launch Angle (\u03b8): The range is maximized at \\( 45^\\circ \\) . Initial Velocity ( \\( v_0 \\) ): Higher velocity increases range quadratically. Gravitational Acceleration (g): A stronger gravitational field decreases range. 3. Practical Applications Sports: Understanding ball trajectories in football and basketball. Engineering: Designing projectile-based systems like rockets or artillery. Astrophysics: Studying planetary motion under different gravity levels. 4. Implementation: Python Simulation We use Python to visualize how range varies with launch angle. import numpy as np import matplotlib.pyplot as plt def projectile_range(v0, g): angles = np.linspace(0, 90, 100) # Angles in degrees angles_rad = np.radians(angles) # Convert to radians ranges = (v0**2 * np.sin(2 * angles_rad)) / g plt.figure(figsize=(8,5)) plt.plot(angles, ranges, label=f'v0 = {v0} m/s') plt.xlabel('Launch Angle (degrees)') plt.ylabel('Range (m)') plt.title('Projectile Range vs. Launch Angle') plt.legend() plt.grid() plt.show() # Example parameters v0 = 20 # Initial velocity in m/s g = 9.81 # Gravity in m/s^2 projectile_range(v0, g) 5. Discussion on Limitations Air Resistance: In real scenarios, drag significantly reduces range. Uneven Terrain: Changes in landing elevation affect results. Wind Influence: Can alter trajectory unpredictably. Conclusion This analysis demonstrates the relationship between launch angle and range, emphasizing its significance in various real-world applications. Future studies can incorporate drag forces for more realistic modeling. \ud83d\ude80 Why is the Maximum Range Achieved at a 45\u00b0 Angle? \ud83d\udccc Range Formula and Maximum Point The total horizontal distance ( range ) covered by a projectile depends on the launch angle and is given by: \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] Where: - R = Range (total horizontal distance covered) - v\u2080 = Initial velocity - \u03b8 = Launch angle - g = Gravitational acceleration - sin(2\u03b8) = Function determining the impact of angle on range To achieve maximum range, the function sin(2\u03b8) must be maximized . In mathematics, sin(x) reaches its maximum value when it equals 1 , meaning: \\[ \\sin(2\\theta) = 1 \\Rightarrow 2\\theta = 90 \\] From this: \\[ \\theta = 45 \\] \ud83c\udfaf Conclusion: The maximum range is achieved at a 45\u00b0 launch angle! \ud83e\uddd0 Why Are Lower and Higher Angles Worse? Let's analyze how a projectile behaves at different angles: \ud83d\udd3b Lower Angles (0\u00b0 - 45\u00b0) More horizontal velocity but weaker vertical motion. The projectile falls quickly to the ground, reducing range. For example, a launch at 30\u00b0 provides some range but falls short due to early descent. \ud83d\udd3a Higher Angles (45\u00b0 - 90\u00b0) More vertical velocity but less horizontal velocity. The projectile reaches a higher altitude but does not travel far. For instance, a launch at 60\u00b0 results in a longer air time, but the horizontal distance is shorter due to reduced horizontal speed. \ud83d\udccc The 45\u00b0 angle provides the best balance! \ud83c\udfad Interesting and Fun Facts \ud83c\udfbe The 45\u00b0 Rule in Sports In sports like football, basketball, or tennis, players aim for a 45\u00b0 angle to maximize projectile distance . However, due to air resistance, an optimal angle in practice is usually around 40\u00b0 - 43\u00b0 . \ud83d\ude80 NASA and Rocket Science Space rockets are not launched at exactly 45\u00b0 because they need to escape the atmosphere efficiently. However, artillery shells and short-range missiles often use the 45\u00b0 angle for maximum range! \ud83c\udff9 Archery and Ballistic Missiles Archers aim close to 45\u00b0 when trying to achieve the longest possible shot . Military artillery uses this angle to maximize impact distance . \ud83d\udcca Python Simulation: Effect of Angle on Range The following Python code calculates the range for different angles and plots the results: import numpy as np import matplotlib.pyplot as plt def projectile_range(v0, g): angles = np.linspace(0, 90, 100) angles_rad = np.radians(angles) ranges = (v0**2 * np.sin(2 * angles_rad)) / g plt.figure(figsize=(8,5)) plt.plot(angles, ranges, label=f'v0 = {v0} m/s', color='b') plt.axvline(45, color='r', linestyle='--', label='Maximum Range: 45\u00b0') plt.xlabel('Launch Angle (degrees)') plt.ylabel('Range (meters)') plt.title('Projectile Range vs. Launch Angle') plt.legend() plt.grid() plt.show() # Example parameters v0 = 20 # Initial velocity (m/s) g = 9.81 # Gravitational acceleration (m/s\u00b2) projectile_range(v0, g) \ud83d\udcc8 What Will the Graph Show? X-axis : Launch angle (in degrees) Y-axis : Range (in meters) Red dashed line : Maximum range at 45\u00b0 Blue curve : Effect of angle on range \ud83d\ude80 CONCLUSION \u2705 The 45\u00b0 angle is the ideal angle for maximum range! \u2705 It provides the best balance between horizontal and vertical velocity. \u2705 In real-world scenarios, air resistance can slightly modify the optimal angle. \u2705 Used in physics, sports, military engineering, and rocket science! \ud83c\udfaf\ud83d\udd25 Yatay Hareket / Horizontal Movement If there is no friction, the speed remains constant. Dikey Hareket / Vertical Movement Speed decreases due to gravity and then reverses. As a result, the object follows a parabolic path and falls to the ground after traveling a certain distance. In this work, we examine the relationship between the launch angle and the distance reached by the object. Our goal is to find out how far the object travels and discover which angle provides the best range. The important factors are: Throw angle affects range! As speed increases, so does range. For best range, we should select forty-five degrees ( \\(45^\\circ\\) ). The \\(45^\\circ\\) angle best balances both horizontal and vertical movement and provides the longest range. import numpy as np import matplotlib.pyplot as plt Constants g = 9.81 # Gravitational acceleration (m/s^2) v0 = 800 # Bullet initial velocity (m/s) angles = np.arange(10, 21, 2) # Shooting angles (between 10\u00b0 and 20\u00b0 with 2\u00b0 increments) Function to calculate range def calculate_range(v0, angle): theta = np.radians(angle) return (v0 ** 2) * np.sin(2 * theta) / g Calculate range for given angles ranges = [calculate_range(v0, angle) for angle in angles] Plot the graph plt.figure(figsize=(8, 5)) plt.plot(angles, ranges, marker='o', linestyle='-', color='b', label='Bullet Range') plt.xlabel('Shooting Angle (\u00b0)') plt.ylabel('Range (m)') plt.title('Range vs. Shooting Angle') plt.legend() plt.grid() plt.show() Differential Equations of Bullet Motion Bullet motion can be modeled in two dimensions: Horizontal motion: $$ \\frac{dx}{dt} = v_x = v_0 \\cos(\\theta) $$ Vertical motion: $$ \\frac{dy}{dt} = v_y $$ $$ \\frac{dv_y}{dt} = -g $$ Where: - \\( x \\) and \\( y \\) are the position coordinates of the bullet. - \\( v_x \\) and \\( v_y \\) are the horizontal and vertical velocity components, respectively. - \\( g \\) is the gravitational acceleration. - \\( \\theta \\) is the shooting angle. To solve these differential equations, numerical methods (such as the Euler method) can be used. \"\"\" print(md_equation) My Colab visit website","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#projectile-motion-analysis-of-range-dependence-on-launch-angle","text":"","title":"Projectile Motion: Analysis of Range Dependence on Launch Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"Projectile motion is governed by Newton\u2019s laws. Assuming no air resistance, the motion can be described using kinematic equations: Horizontal motion: \\[ x = v_0 \\cos(\\theta) t \\] Vertical motion: $$ y = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 $$ The total time of flight is found by solving for when the projectile returns to its initial height: $$ t_f = \\frac{2 v_0 \\sin(\\theta)}{g} $$ The horizontal range is given by: \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\]","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"The horizontal range depends on: Launch Angle (\u03b8): The range is maximized at \\( 45^\\circ \\) . Initial Velocity ( \\( v_0 \\) ): Higher velocity increases range quadratically. Gravitational Acceleration (g): A stronger gravitational field decreases range.","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"Sports: Understanding ball trajectories in football and basketball. Engineering: Designing projectile-based systems like rockets or artillery. Astrophysics: Studying planetary motion under different gravity levels.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation-python-simulation","text":"We use Python to visualize how range varies with launch angle. import numpy as np import matplotlib.pyplot as plt def projectile_range(v0, g): angles = np.linspace(0, 90, 100) # Angles in degrees angles_rad = np.radians(angles) # Convert to radians ranges = (v0**2 * np.sin(2 * angles_rad)) / g plt.figure(figsize=(8,5)) plt.plot(angles, ranges, label=f'v0 = {v0} m/s') plt.xlabel('Launch Angle (degrees)') plt.ylabel('Range (m)') plt.title('Projectile Range vs. Launch Angle') plt.legend() plt.grid() plt.show() # Example parameters v0 = 20 # Initial velocity in m/s g = 9.81 # Gravity in m/s^2 projectile_range(v0, g)","title":"4. Implementation: Python Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-discussion-on-limitations","text":"Air Resistance: In real scenarios, drag significantly reduces range. Uneven Terrain: Changes in landing elevation affect results. Wind Influence: Can alter trajectory unpredictably.","title":"5. Discussion on Limitations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#conclusion","text":"This analysis demonstrates the relationship between launch angle and range, emphasizing its significance in various real-world applications. Future studies can incorporate drag forces for more realistic modeling.","title":"Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#why-is-the-maximum-range-achieved-at-a-45-angle","text":"","title":"\ud83d\ude80 Why is the Maximum Range Achieved at a 45\u00b0 Angle?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range-formula-and-maximum-point","text":"The total horizontal distance ( range ) covered by a projectile depends on the launch angle and is given by: \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] Where: - R = Range (total horizontal distance covered) - v\u2080 = Initial velocity - \u03b8 = Launch angle - g = Gravitational acceleration - sin(2\u03b8) = Function determining the impact of angle on range To achieve maximum range, the function sin(2\u03b8) must be maximized . In mathematics, sin(x) reaches its maximum value when it equals 1 , meaning: \\[ \\sin(2\\theta) = 1 \\Rightarrow 2\\theta = 90 \\] From this: \\[ \\theta = 45 \\] \ud83c\udfaf Conclusion: The maximum range is achieved at a 45\u00b0 launch angle!","title":"\ud83d\udccc Range Formula and Maximum Point"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#why-are-lower-and-higher-angles-worse","text":"Let's analyze how a projectile behaves at different angles:","title":"\ud83e\uddd0 Why Are Lower and Higher Angles Worse?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#lower-angles-0-45","text":"More horizontal velocity but weaker vertical motion. The projectile falls quickly to the ground, reducing range. For example, a launch at 30\u00b0 provides some range but falls short due to early descent.","title":"\ud83d\udd3b Lower Angles (0\u00b0 - 45\u00b0)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#higher-angles-45-90","text":"More vertical velocity but less horizontal velocity. The projectile reaches a higher altitude but does not travel far. For instance, a launch at 60\u00b0 results in a longer air time, but the horizontal distance is shorter due to reduced horizontal speed. \ud83d\udccc The 45\u00b0 angle provides the best balance!","title":"\ud83d\udd3a Higher Angles (45\u00b0 - 90\u00b0)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#interesting-and-fun-facts","text":"","title":"\ud83c\udfad Interesting and Fun Facts"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#the-45-rule-in-sports","text":"In sports like football, basketball, or tennis, players aim for a 45\u00b0 angle to maximize projectile distance . However, due to air resistance, an optimal angle in practice is usually around 40\u00b0 - 43\u00b0 .","title":"\ud83c\udfbe The 45\u00b0 Rule in Sports"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#nasa-and-rocket-science","text":"Space rockets are not launched at exactly 45\u00b0 because they need to escape the atmosphere efficiently. However, artillery shells and short-range missiles often use the 45\u00b0 angle for maximum range!","title":"\ud83d\ude80 NASA and Rocket Science"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#archery-and-ballistic-missiles","text":"Archers aim close to 45\u00b0 when trying to achieve the longest possible shot . Military artillery uses this angle to maximize impact distance .","title":"\ud83c\udff9 Archery and Ballistic Missiles"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#python-simulation-effect-of-angle-on-range","text":"The following Python code calculates the range for different angles and plots the results: import numpy as np import matplotlib.pyplot as plt def projectile_range(v0, g): angles = np.linspace(0, 90, 100) angles_rad = np.radians(angles) ranges = (v0**2 * np.sin(2 * angles_rad)) / g plt.figure(figsize=(8,5)) plt.plot(angles, ranges, label=f'v0 = {v0} m/s', color='b') plt.axvline(45, color='r', linestyle='--', label='Maximum Range: 45\u00b0') plt.xlabel('Launch Angle (degrees)') plt.ylabel('Range (meters)') plt.title('Projectile Range vs. Launch Angle') plt.legend() plt.grid() plt.show() # Example parameters v0 = 20 # Initial velocity (m/s) g = 9.81 # Gravitational acceleration (m/s\u00b2) projectile_range(v0, g)","title":"\ud83d\udcca Python Simulation: Effect of Angle on Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#what-will-the-graph-show","text":"X-axis : Launch angle (in degrees) Y-axis : Range (in meters) Red dashed line : Maximum range at 45\u00b0 Blue curve : Effect of angle on range","title":"\ud83d\udcc8 What Will the Graph Show?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#conclusion_1","text":"\u2705 The 45\u00b0 angle is the ideal angle for maximum range! \u2705 It provides the best balance between horizontal and vertical velocity. \u2705 In real-world scenarios, air resistance can slightly modify the optimal angle. \u2705 Used in physics, sports, military engineering, and rocket science! \ud83c\udfaf\ud83d\udd25","title":"\ud83d\ude80 CONCLUSION"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#yatay-hareket-horizontal-movement","text":"If there is no friction, the speed remains constant.","title":"Yatay Hareket / Horizontal Movement"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#dikey-hareket-vertical-movement","text":"Speed decreases due to gravity and then reverses. As a result, the object follows a parabolic path and falls to the ground after traveling a certain distance. In this work, we examine the relationship between the launch angle and the distance reached by the object. Our goal is to find out how far the object travels and discover which angle provides the best range.","title":"Dikey Hareket / Vertical Movement"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#the-important-factors-are","text":"Throw angle affects range! As speed increases, so does range. For best range, we should select forty-five degrees ( \\(45^\\circ\\) ). The \\(45^\\circ\\) angle best balances both horizontal and vertical movement and provides the longest range. import numpy as np import matplotlib.pyplot as plt","title":"The important factors are:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#constants","text":"g = 9.81 # Gravitational acceleration (m/s^2) v0 = 800 # Bullet initial velocity (m/s) angles = np.arange(10, 21, 2) # Shooting angles (between 10\u00b0 and 20\u00b0 with 2\u00b0 increments)","title":"Constants"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#function-to-calculate-range","text":"def calculate_range(v0, angle): theta = np.radians(angle) return (v0 ** 2) * np.sin(2 * theta) / g","title":"Function to calculate range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#calculate-range-for-given-angles","text":"ranges = [calculate_range(v0, angle) for angle in angles]","title":"Calculate range for given angles"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#plot-the-graph","text":"plt.figure(figsize=(8, 5)) plt.plot(angles, ranges, marker='o', linestyle='-', color='b', label='Bullet Range') plt.xlabel('Shooting Angle (\u00b0)') plt.ylabel('Range (m)') plt.title('Range vs. Shooting Angle') plt.legend() plt.grid() plt.show()","title":"Plot the graph"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#differential-equations-of-bullet-motion","text":"Bullet motion can be modeled in two dimensions: Horizontal motion: $$ \\frac{dx}{dt} = v_x = v_0 \\cos(\\theta) $$ Vertical motion: $$ \\frac{dy}{dt} = v_y $$ $$ \\frac{dv_y}{dt} = -g $$ Where: - \\( x \\) and \\( y \\) are the position coordinates of the bullet. - \\( v_x \\) and \\( v_y \\) are the horizontal and vertical velocity components, respectively. - \\( g \\) is the gravitational acceleration. - \\( \\theta \\) is the shooting angle. To solve these differential equations, numerical methods (such as the Euler method) can be used. \"\"\" print(md_equation)","title":"Differential Equations of Bullet Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#my-colab","text":"visit website","title":"My Colab"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Investigating the Dynamics of a Forced Damped Pendulum Motivation The forced damped pendulum exhibits complex dynamics due to the interplay of damping, restoring forces, and external periodic forcing. Understanding this system provides insights into resonance, chaos, and quasiperiodic motion, relevant in fields such as energy harvesting, climate systems, and mechanical vibrations. Theoretical Foundation The equation of motion for a forced damped pendulum is: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] For small angles, we approximate \\( \\sin(\\theta) \\approx \\theta \\) , reducing the equation to a linear form: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t) \\] The resonance condition occurs when \\( \\omega \\approx \\omega_0 \\) , leading to maximum amplitude. Numerical Simulation We solve the nonlinear equation numerically using the Runge-Kutta method. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Define the forced damped pendulum equations def forced_damped_pendulum(t, y, gamma, omega0, A, omega): theta, omega_t = y dtheta_dt = omega_t domega_dt = -gamma * omega_t - omega0**2 * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Parameters gamma = 0.5 # Damping coefficient omega0 = 1.0 # Natural frequency A = 1.2 # Forcing amplitude omega = 2.0 # Forcing frequency # Initial conditions and time span t_span = (0, 50) y0 = [0.2, 0] # Initial angle and angular velocity t_eval = np.linspace(0, 50, 1000) # Solve the ODE sol = solve_ivp(forced_damped_pendulum, t_span, y0, t_eval=t_eval, args=(gamma, omega0, A, omega)) # Plot results plt.figure(figsize=(10,5)) plt.plot(sol.t, sol.y[0], label=\"Theta (angle)\") plt.xlabel(\"Time\") plt.ylabel(\"Angle (radians)\") plt.title(\"Forced Damped Pendulum Motion\") plt.legend() plt.grid() plt.show() Analysis of Dynamics Effects of Parameters: Increasing \\( \\gamma \\) leads to faster damping. Higher \\( A \\) induces chaotic behavior at certain frequencies. When \\( \\omega \\approx \\omega_0 \\) , resonance occurs. Chaos and Transitions: A phase portrait can illustrate chaotic behavior. Poincar\u00e9 sections help identify quasiperiodic or chaotic states. Practical Applications Energy Harvesting: Used in piezoelectric devices. Engineering: Suspension bridges under periodic loads. Biomechanics: Modeling human gait oscillations. Conclusion This study demonstrates the transition from simple periodic motion to chaos. Future extensions can include nonlinear damping or stochastic driving forces.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#motivation","text":"The forced damped pendulum exhibits complex dynamics due to the interplay of damping, restoring forces, and external periodic forcing. Understanding this system provides insights into resonance, chaos, and quasiperiodic motion, relevant in fields such as energy harvesting, climate systems, and mechanical vibrations.","title":"Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#theoretical-foundation","text":"The equation of motion for a forced damped pendulum is: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] For small angles, we approximate \\( \\sin(\\theta) \\approx \\theta \\) , reducing the equation to a linear form: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t) \\] The resonance condition occurs when \\( \\omega \\approx \\omega_0 \\) , leading to maximum amplitude.","title":"Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#numerical-simulation","text":"We solve the nonlinear equation numerically using the Runge-Kutta method. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Define the forced damped pendulum equations def forced_damped_pendulum(t, y, gamma, omega0, A, omega): theta, omega_t = y dtheta_dt = omega_t domega_dt = -gamma * omega_t - omega0**2 * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Parameters gamma = 0.5 # Damping coefficient omega0 = 1.0 # Natural frequency A = 1.2 # Forcing amplitude omega = 2.0 # Forcing frequency # Initial conditions and time span t_span = (0, 50) y0 = [0.2, 0] # Initial angle and angular velocity t_eval = np.linspace(0, 50, 1000) # Solve the ODE sol = solve_ivp(forced_damped_pendulum, t_span, y0, t_eval=t_eval, args=(gamma, omega0, A, omega)) # Plot results plt.figure(figsize=(10,5)) plt.plot(sol.t, sol.y[0], label=\"Theta (angle)\") plt.xlabel(\"Time\") plt.ylabel(\"Angle (radians)\") plt.title(\"Forced Damped Pendulum Motion\") plt.legend() plt.grid() plt.show()","title":"Numerical Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#analysis-of-dynamics","text":"Effects of Parameters: Increasing \\( \\gamma \\) leads to faster damping. Higher \\( A \\) induces chaotic behavior at certain frequencies. When \\( \\omega \\approx \\omega_0 \\) , resonance occurs. Chaos and Transitions: A phase portrait can illustrate chaotic behavior. Poincar\u00e9 sections help identify quasiperiodic or chaotic states.","title":"Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#practical-applications","text":"Energy Harvesting: Used in piezoelectric devices. Engineering: Suspension bridges under periodic loads. Biomechanics: Modeling human gait oscillations.","title":"Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#conclusion","text":"This study demonstrates the transition from simple periodic motion to chaos. Future extensions can include nonlinear damping or stochastic driving forces.","title":"Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}